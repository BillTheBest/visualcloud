//Get environment details and trigger graph widget save
function save_environment(){
    var graphName = $('input#graph-name').val().trim();
    var keyPairName = $('select#graph-key-pair-name').val();
    var securityGroupName = $('select#graph-security-group-name').val();
    var regionId = $('input#graph-region-id').val();
    var attributes = { name: graphName, key_pair_name: keyPairName, security_group: securityGroupName, region_id: regionId };
    $('.graph-area').graphArea("save", attributes);
}

function getInstanceTypeLabel(instanceTypes,instanceTypeId){
  for(var i = 0; i < instanceTypes.length; i++)
    if(instanceTypes[i].id == instanceTypeId)
      return instanceTypes[i].label;
}

function validate_environment(){
    var graphName = $('input#graph-name').val().trim();
    var keyPairName = $('select#graph-key-pair-name').val();
    var securityGroupName = $('select#graph-security-group-name').val();
    var regionId = $('input#graph-region-id').val();
    if(graphName == "")
      addMessagesToDiv($('#graph-new-error-messages'), getErrorMessage('Environment name cannot be empty'));
    else if(regionId == "" || regionId == 'undefined')
      addMessagesToDiv($('#graph-new-error-messages'), getErrorMessage('Environment should have a region'));
    else
      $('#graph-new-frm').submit();
    //Do not submit form
    return false;
}

function delete_instance(resource_type) {
  var instance_id = $('#'+resource_type+'-configuration').data('editElement');
  jsPlumb.removeAllEndpoints(instance_id);
  $('.graph-area').graphArea("removeInstanceFromStage", instance_id);
}

function requestProvision(graphId){
  showLoading();
  $.ajax({
    url: '/provision?id='+graphId,
    type: 'POST',
    dataType: "script",
    contentType: 'application/json',
    data : $('.graph-area').graphArea("getInstances"),
    complete: function(){
      hideLoading();
    }
  });
}

$(function() {

 if($('.stack-status').length != 0)
 {
    $('.stack-status').each(function(){
    var environment_id = $(this).attr("data-graph-id");
    var internal_status = setInterval(function(){
      var ajaxRequest = $.ajax({
        url: '/environment_status?id='+environment_id,
        type: 'GET'
      });
    }, <%= VisualCloudConfig[:status_check_interval] * 1500 %>);

  });
 }

});




//Displaying the slider for the select options, displaying the selected value
function addSlider(sliderDiv, instanceTypes, selectedIndex, elementId){
  if (typeof(selectedIndex) == 'undefined')
    selectedIndex = 0 ;
  else if(sliderDiv.split('-')[0] != "RDS" && sliderDiv.split('-')[0] != "ElastiCache")
    selectedIndex -= 1; // as slider position starts with 0 and ends with length - 1
  else
    //re-setting index if the id value is not starting from '1'
    for(var i = 0;i < instanceTypes.length; i++)
      if(instanceTypes[i].id == selectedIndex ) {
        selectedIndex = i;
        break;
      }
  //setting the instance type id in the dialog box
  var instance_type_id =   instanceTypes[selectedIndex].id;
  $("#"+sliderDiv.split('-')[0]+"_instance_type_id").html(instance_type_id);

  placeLabelsOnSlider($('#' +sliderDiv + ' .slider'), instanceTypes);
  // displaying the white background for the slider movement
  $('.ui-slider-range').css('width',(selectedIndex) * 100/(instanceTypes.length - 1) + '%');
  var slider = $('#' + sliderDiv + ' .slider').slider({
    animate: "fast",
    max: instanceTypes.length - 1,
    value: selectedIndex,
    slide: function(event, ui) {
      // displaying the white background for the slider movement
      $('.ui-slider-range').css('width',(ui.value) * 100/(instanceTypes.length - 1) + '%');
      //setting the instance type id in the dialog box
      $("#"+sliderDiv.split('-')[0]+"_instance_type_id").html(instanceTypes[ui.value].id);
      var labelIcon = getInstanceTypeLabel(instanceTypes,instanceTypes[ui.value].id);
      $('#instance-type-label-'+ elementId).html(labelIcon);
    }
  });

  //Populating the tooltip for the first time
  var selectedInstanceType = {};
  for(var i = 0;i < instanceTypes.length; i++)
    if(instanceTypes[i].id == selectedIndex ) {
      selectedInstanceType = instanceTypes[i] ;
      break;
    }
  var newHandlePosition = $('.ui-slider-handle').css('left');
  setTooltipForSilder(selectedInstanceType, newHandlePosition);
}

function placeLabelsOnSlider(jSliderDiv, instanceTypes){
  for(var i = 0; i < instanceTypes.length; i++){
    var label = instanceTypes[i].label ;
    var labelIndex = i ;
    var labelHtml = $('<h6>').appendTo(jSliderDiv);
    labelHtml.html(label);
    labelHtml.css('left', labelIndex * 100/(instanceTypes.length - 1) + '%');
    labelHtml.addClass('slider-label');
    labelHtml.attr('title', instanceTypes[i].api_name);
    labelHtml.attr('rel', 'tooltip');
    labelHtml.data('placement', 'right');
    jSliderDiv.append(labelHtml);
  }
}

function setTooltipForSilder(instanceType, newSliderPosition){
  var tooltipText = getInstanceDescription(instanceType);
  $('.slider_tooltip').css('left', newSliderPosition);
  $('.slider_tooltip').html(tooltipText);
}

function getInstanceDescription(instanceType){

  var instanceName = instanceType.name ;
  var instanceDescription = instanceType.description ;
  var tooltipText = instanceName + '</br>' + instanceDescription ;
  return tooltipText ;
}

function startStatusPoll(environmentId){
  $(document).ready(function(){
    if($('.stack-status-icon').length != 0){
      setInterval(function(){
        $.ajax({
          url: '/stack_info?id=' + environmentId,
          type: 'GET'
        }).done(function(data){
          var stackStatus = data.status;
          setStatusIcon(stackStatus);

          //Set the output values for each instance
          for(var key in data.instanceAttributes){
            var configAttributes = data.instanceAttributes[key];
            //Adding get() for configattributes
            //A better way to do this may be wrap configAttribute into another object
            //wherever get() is called,
            //which has a get() and returns Not Available when attribute doesn't exist
            injectConfigGetter(configAttributes);
            $('#instance-'+key).instance('setConfigAttributes', configAttributes);
          }
        });
      }, <%= VisualCloudConfig[:status_check_interval] * 2000 %>);
    }
  });
}

function setStatusIcon(stackStatus){
  $(".stack-status-icon").hide();
  $('#status-icon-'+stackStatus).show();
}

function prepareStage(){
  $('.graph-area').graphArea();
};

function addInstanceCloneToGraph(instanceId){
  var graphArea = $('.graph-area') ;
  var newElement = $('<div class="instance"></div>');
  graphArea.graphArea("addInstanceToStage", newElement, instanceId);

  return newElement ;
};

//Update the element id's of instances with actual ID's saved in DB
//TODO: Remove hardcoded 'instance-' prefix for element id's
function updateInstanceElementIds(instance_ids){
  var instanceLabel;
  for(instanceLabel in instance_ids){
    var instanceElement = $('.graph-area').graphArea("getInstanceElementByLabel", instanceLabel );
    instanceElement.attr("id", 'instance-' + instance_ids[instanceLabel]);
  }
};

//Show dialog for creating new instances
function showConfigurationForm(dialogId, droppedPosition){
  var dialog = $('#'+dialogId);
  var resource_type = dialogId.split('-')[0];
  callToAddSlider(resource_type);
  //Start with a clean sheet for new instances
  //editElement is the domID of element used while editing it
  //xpos and ypos will not be available when the new instance
  //is just dropped on the stage
  dialog.removeData(['editElement', 'xpos', 'ypos']);
  dialog.data('xpos', droppedPosition.left);
  dialog.data('ypos', droppedPosition.top);
  dialog.find('#' + resource_type + '_delete').hide();
  /*//TODO:Configuration Dialog shouldn't know about the instance specific fields
  dialog.find('#' + resource_type + '_ip_address').hide();
  dialog.find('#' + resource_type + '_public_dns').hide();
  dialog.find('#' + resource_type + '_bucket_name').hide();
  dialog.find('#' + resource_type + '_dns_name').hide();
  */
  dialog.modal('show');
};

//TODO: Logic is totally hardcoded here.
//TODO: Please choose a better name than "callToAddSlider"
function callToAddSlider(resource_type, selectedIndex, elementId){
  var id = '';
  if(elementId)
    id = elementId.split('-')[1];
  if (resource_type == "RDS")
    addSlider(resource_type+"-slider", rdsInstanceTypes, selectedIndex, id);
  else if(resource_type == "ElastiCache")
    addSlider(resource_type+"-slider", elastiCacheInstanceTypes, selectedIndex, id);
  else if(resource_type != "ELB" && resource_type != "S3")
    addSlider(resource_type+"-slider", ec2InstanceTypes, selectedIndex, id);
}

function addMessagesToDiv(jDiv, content){
   jDiv.append(content);
   $(".messages").delay(10000).fadeOut("slow", function () { $(this).remove(); });
}

function showFlashMessages(jDiv, type, content){
   var id = "ajax-template";
   if(type == "notice")
     id = "basic-template";
   if(type == "error")
     id = "themeroller";
   jDiv.notify("create",id,{text: content},{expires: 5000,speed: 1000,custom: true});
}

function getErrorMessage(message){
  var errorMessage = '<div class="alert alert-error messages"><button type="button" class="close" data-dismiss="alert">x</button>' + message + '</div>' ;
  return errorMessage ;
};

//Replace reallylongstrings with reallylo...
function shortenLongStrings(string, maxLength){
  var shortString = string.substring(0, (maxLength-4));
  if (string.length > maxLength)
    shortString += '...';
  return shortString;
}

//Inject Getter for config attributes which returns Not Available if attr doesn't exist
function injectConfigGetter(configAttributes){
  configAttributes.get = function(attr){
    return this[attr] == undefined ? "Not Available" : this[attr] ;
  }
}

//Enable Bootstrap Tooltips for dialog box
$(document).on('mouseenter','[rel=tooltip]', function(){
  $(this).tooltip('show');
});

$(document).on('mouseleave','[rel=tooltip]', function(){
  $(this).tooltip('hide');
});

$(document).ready(function(){
  //Hide notifications
  $("#container").notify({expires: false,speed: 1000});
  $( "#ElastiCache_node_count" ).spinner();
});

/*
// For debugging mouse movement inside graph area
$(document).ready(function(){
  $('.graph-area').mousemove(function(e){
  var x = e.pageX - this.offsetLeft;
  var y = e.pageY - this.offsetTop;
  $('.graph-area').html("X: " + x + " Y: " + y);
  });
});
*/
