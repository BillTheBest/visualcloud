//Get environment details and trigger graph widget save
function save_environment(){
    var graphName = $('input#graph-name').val().trim();
    var keyPairName = $('select#graph-key-pair-name').val();
    var securityGroupName = $('select#graph-security-group-name').val();
    var regionId = $('input#graph-region-id').val();
    var attributes = { name: graphName, key_pair_name: keyPairName, security_group: securityGroupName, region_id: regionId };
    $('.graph-area').graphArea("save", attributes);
}

function getInstanceTypeLabel(instanceTypes,instanceTypeId){
  for(var i = 0; i < instanceTypes.length; i++)
    if(instanceTypes[i].id == instanceTypeId)
      return instanceTypes[i].label;
}

function validate_environment(){
    var graphName = $('input#graph-name').val().trim();
    var keyPairName = $('select#graph-key-pair-name').val();
    var securityGroupName = $('select#graph-security-group-name').val();
    var regionId = $('input#graph-region-id').val();
    if(graphName == "")
      addMessagesToDiv($('#graph-new-error-messages'), getErrorMessage('Environment name cannot be empty'));
    else if(regionId == "" || regionId == 'undefined')
      addMessagesToDiv($('#graph-new-error-messages'), getErrorMessage('Environment should have a region'));
    else
      $('#graph-new-frm').submit();
    //Do not submit form
    return false;
}

function delete_instance(resource_type) {
  var instance_id = $('#'+resource_type+'-configuration').data('editElement');
  jsPlumb.removeAllEndpoints(instance_id);
  $('.graph-area').graphArea("removeInstanceFromStage", instance_id);
}

function requestProvision(graphId){
  showLoading();
  $.ajax({
    url: '/provision?id='+graphId,
    type: 'POST',
    dataType: "script",
    contentType: 'application/json',
    data : $('.graph-area').graphArea("getInstances")
  });
}

$(function() {

 if($('.stack-status').length != 0)
 {
    $('.stack-status').each(function(){
    var environment_id = $(this).attr("data-graph-id");
    var internal_status = setInterval(function(){
      var ajaxRequest = $.ajax({
        url: '/environment_status?id='+environment_id,
        type: 'GET'
      });
    }, <%= VisualCloudConfig[:status_check_interval] * 1500 %>);

  });
 }

});

function getInstanceTypesOfResourceType(resourceType){
  switch(resourceType){
    case "RDS" : return rdsInstanceTypes;
    case "ElastiCache" : return elastiCacheInstanceTypes;
    default : return ec2InstanceTypes;
  }
}


//Displaying the slider for the select options, displaying the selected value
function addSlider(sliderDiv, selectedIndex, elementId){
  var resourceType = sliderDiv.split('-')[0];
  instanceTypes = getInstanceTypesOfResourceType(resourceType);
  if (typeof(selectedIndex) == 'undefined')
    selectedIndex = 0 ;
  else if(resourceType != "RDS" && resourceType != "ElastiCache")
    selectedIndex -= 1; // as slider position starts with 0 and ends with length - 1
  else
    //re-setting index if the id value is not starting from '1'
    for(var i = 0;i < instanceTypes.length; i++)
      if(instanceTypes[i].id == selectedIndex ) {
        selectedIndex = i;
        break;
      }
  //setting the instance type id in the dialog box
  var instance_type_id =   instanceTypes[selectedIndex].id;
  $("#"+resourceType+"_instance_type_id").html(instance_type_id);
  placeLabelsOnSlider($('#' +sliderDiv + ' .slider'), instanceTypes);
  // displaying the white background for the slider movement
  $('.ui-slider-range').css('width',(selectedIndex) * 100/(instanceTypes.length - 1) + '%');
  var slider = $('#' + sliderDiv + ' .slider').slider({
    animate: "fast",
    max: instanceTypes.length - 1,
    value: selectedIndex,
    slide: function(event, ui) {
      // displaying the white background for the slider movement
      $('.ui-slider-range').css('width',(ui.value) * 100/(instanceTypes.length - 1) + '%');
      //setting the instance type id in the dialog box
      $("#"+resourceType+"_instance_type_id").html(instanceTypes[ui.value].id);
      var labelIcon = getInstanceTypeLabel(instanceTypes,instanceTypes[ui.value].id);
      if(elementId != undefined)
        $('#instance-type-label-'+ elementId.split('-')[1]).html(labelIcon);
    }
  });
}

function placeLabelsOnSlider(jSliderDiv, instanceTypes){
  for(var i = 0; i < instanceTypes.length; i++){
    var label = instanceTypes[i].label ;
    var labelIndex = i ;
    var labelHtml = $('<h6>').appendTo(jSliderDiv);
    labelHtml.html(label);
    labelHtml.css('left', labelIndex * 100/(instanceTypes.length - 1) + '%');
    labelHtml.addClass('slider-label');
    labelHtml.attr('title', instanceTypes[i].api_name);
    labelHtml.attr('rel', 'tooltip');
    labelHtml.data('placement', 'right');
    jSliderDiv.append(labelHtml);
  }
}

function startStatusPoll(environmentId){
  $(document).ready(function(){
    if($('.stack-status-icon').length != 0){
      setInterval(function(){
        $.ajax({
          url: '/stack_info?id=' + environmentId,
          type: 'GET'
        }).done(function(data){
          var stackStatus = data.status;
          setStatusIcon(stackStatus);
          changeCursorAndTooltipTitleForProvisionIcon(stackStatus);

          //Set the output values for each instance
          for(var key in data.instanceAttributes){
            var configAttributes = data.instanceAttributes[key];
            $('#instance-'+key).instance('setConfigAttributes', configAttributes);
          }
        });
      }, <%= VisualCloudConfig[:status_check_interval] * 2000 %>);
    }
  });
}

function getStatusOfEnvironmentsByProject(projectId){
  $(document).ready(function(){
      $.ajax({
          url: '/project_status?id=' + projectId,
          type: 'GET'
        }).done(function(data){
          for(var key in data){
            if(data[key] == undefined)
              data[key] = "DEFAULT";
            $('#'+key+'_status-icon-'+data[key]).removeClass('hide');
          }
        });
  });
}

function setStatusIcon(stackStatus){
  $(".stack-status-icon").hide();
  $('#status-icon-'+stackStatus).show();
}

function changeCursorAndTooltipTitleForProvisionIcon(stackStatus){
  if(stackStatus == "CREATE_IN_PROGRESS" || stackStatus == "UPDATE_IN_PROGRESS"){
    document.getElementById("graph-provision").style.cursor = 'default';
    $('#graph-provision').attr('data-original-title','provisioning is in progress');
  }
  else{
    document.getElementById("graph-provision").style.cursor = 'pointer';
    $('#graph-provision').attr('data-original-title','provision');
  }
}

function prepareStage(){
  $('.graph-area').graphArea();
};

function addInstanceCloneToGraph(instanceId){
  var graphArea = $('.graph-area') ;
  var newElement = $('<div class="instance"></div>');
  graphArea.graphArea("addInstanceToStage", newElement, instanceId);

  return newElement ;
};

//adds java version drop down for java instance dialog box
function addJavaVersionDropDown(){
  var simpleJavaForm = document.getElementById("Java-config-frm");
  var selectLabel = document.createElement('p');
  selectLabel.setAttribute('id', 'Java_version_label');
  var selectLabelText = document.createTextNode("Java Version");
  selectLabel.appendChild(selectLabelText);
  var javaVersionSelect = document.createElement('select');
  javaVersionSelect.setAttribute('id', 'Java_version');
  javaVersionSelect.setAttribute('name', 'Java_version');
  javaVersionSelect.setAttribute("class","drop_down_width");
  var input = <%= VisualCloudConfig[:java_versions] %>;
  for(var i = 0;i < input.length;i++){
    var option = document.createElement("option");
    option.setAttribute("value", input[i]);
    option.innerHTML = input[i];
    javaVersionSelect.appendChild(option);
  }
  $('input#Java_label').after(selectLabel);
  $('p#Java_version_label').after(javaVersionSelect);
}


//Show dialog for creating new instances
function showConfigurationForm(dialogId, droppedPosition){
  var dialog = $('#'+dialogId);
  var resource_type = dialogId.split('-')[0];
  //Start with a clean sheet for new instances
  //editElement is the domID of element used while editing it
  //xpos and ypos will not be available when the new instance
  //is just dropped on the stage
  dialog.removeData(['editElement', 'xpos', 'ypos']);
  dialog.data('xpos', droppedPosition.left);
  dialog.data('ypos', droppedPosition.top);
  dialog.find('#' + resource_type + '_delete').hide();
  dialog.modal('show');
}

function addMessagesToDiv(jDiv, content){
   jDiv.append(content);
   $(".messages").delay(10000).fadeOut("slow", function () { $(this).remove(); });
}

function showFlashMessages(jDiv, type, content){
   var id = "ajax-template";
   if(type == "notice")
     id = "basic-template";
   if(type == "error")
     id = "themeroller";
   jDiv.notify("create",id,{text: content},{expires: 5000,speed: 1000,custom: true});
}

function getErrorMessage(message){
  var errorMessage = '<div class="alert alert-error messages"><button type="button" class="close" data-dismiss="alert">x</button>' + message + '</div>' ;
  return errorMessage ;
};

//Replace reallylongstrings with reallylo...
function shortenLongStrings(string, maxLength){
  var shortString = string.substring(0, (maxLength-3));
  if (string.length >= (maxLength-2))
    shortString += '...';
  return shortString;
}

//Getter for config attributes which returns Not Available if attr doesn't exist
function getConfigAttribute(configAttributes, attr){
  return ((configAttributes[attr] == undefined) ? "Not Available" : configAttributes[attr] );
}

//Enable Bootstrap Tooltips for dialog box
$(document).on('mouseenter','[rel=tooltip]', function(){
  $(this).tooltip('show');
});

$(document).on('mouseleave','[rel=tooltip]', function(){
  $(this).tooltip('hide');
});

$(document).ready(function(){
  //Hide notifications
  $("#container").notify({expires: false,speed: 1000});
  $( "#ElastiCache_node_count" ).spinner();
});

/*
// For debugging mouse movement inside graph area
$(document).ready(function(){
  $('.graph-area').mousemove(function(e){
  var x = e.pageX - this.offsetLeft;
  var y = e.pageY - this.offsetTop;
  $('.graph-area').html("X: " + x + " Y: " + y);
  });
});
*/
