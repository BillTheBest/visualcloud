function prepareStage(){
  $('.graph-area').graphArea();
};

function addInstanceCloneToGraph(instanceId){
  var graphArea = $('.graph-area') ;
  var newElement = $('<div class="instance"></div>');
  graphArea.graphArea("addInstanceToStage", newElement, instanceId);

  return newElement ;
};

function showConfigurationForm(dialogId, droppedPosition){
  var dialog = $('#'+dialogId);
  var resource_type = dialogId.split('-')[0];
  callToAddSlider(resource_type);
  dialog.removeData(['editElement', 'xpos', 'ypos']);
  dialog.data('xpos', droppedPosition.left);
  dialog.data('ypos', droppedPosition.top);
  dialog.find('#' + resource_type + '_delete').hide();
  dialog.find('#' + resource_type + '_ip_address').hide();
  dialog.find('#' + resource_type + '_public_dns').hide();
  dialog.find('#' + resource_type + '_elastic_ip_new').prop("checked",true);
  dialog.find('#' + resource_type + '_elastic_ip_dropdown').parent().hide();
  dialog.modal('show');
};

function callToAddSlider(resource_type, selectedIndex, elementId){
  var id = '';
  if(elementId)
    id = elementId.split('-')[1];
  if (resource_type == "RDS")
    addSlider(resource_type+"-slider", rdsInstanceTypes, selectedIndex, id);
  else if(resource_type == "ElastiCache")
    addSlider(resource_type+"-slider", elastiCacheInstanceTypes, selectedIndex, id);
  else if(resource_type != "ELB" && resource_type != "S3")
    addSlider(resource_type+"-slider", ec2InstanceTypes, selectedIndex, id);
}

function showInstanceEditForm(editElement){
  var instanceOptions = $('#'+editElement).instance("option") ;
  var dialogId = $('#'+editElement).instance('getConfigurationDialogId') ;
  var dialog = $('#'+dialogId);
  var resource_type = instanceOptions.resourceType;
  dialog.removeData(['editElement', 'xpos', 'ypos']);
  dialog.data('editElement', editElement);
  dialog.find('.instance_label').val(instanceOptions.label);
  dialog.find('#' + resource_type + '_ami_id').val(instanceOptions.configAttributes.ami_id);
  callToAddSlider(resource_type , instanceOptions.InstanceType, editElement);
  $('#' + resource_type + '_instance_type_id').html(instanceOptions.InstanceType);
  dialog.find('#' + resource_type + '_access_control').val(instanceOptions.configAttributes.access_control);
  if(instanceOptions.ipAddress != "")
    dialog.find('#' + resource_type + '_ip_address').html("Ip Address : <code class='fnt_size'>"+instanceOptions.ipAddress+"</code>").show();
  if(instanceOptions.publicDNS != "")
    dialog.find('#' + resource_type + '_public_dns').html("Public DNS : <code class='fnt_size'>"+instanceOptions.publicDNS+"</code>").show();
  dialog.find('#' + resource_type + '_version').val(instanceOptions.configAttributes.java_version);
  dialog.find('#' + resource_type + '_tomcat_version').val(instanceOptions.configAttributes.tomcat_version);
  dialog.find('#' + resource_type + '_size').val(instanceOptions.configAttributes.size);
  dialog.find('#' + resource_type + '_master_user_name').val(instanceOptions.configAttributes.master_user_name);
  dialog.find('#' + resource_type + '_master_password').val(instanceOptions.configAttributes.master_password);
  dialog.find('#' + resource_type + '_multiAZ').prop("checked",instanceOptions.configAttributes.multiAZ);
  dialog.find('#' + resource_type + '_cloudfront').prop("checked",instanceOptions.configAttributes.cloudFront);
  dialog.find('#' + resource_type + '_node_count').val(instanceOptions.configAttributes.node_count);
  if(instanceOptions.configAttributes.elastic_ip != ""){
    dialog.find('#' + resource_type + '_elastic_ip_list').prop("checked",true);
    dialog.find('#' + resource_type + '_elastic_ip_dropdown').val(instanceOptions.configAttributes.elastic_ip).parent().show();
  }
  else {
    dialog.find('#' + resource_type + '_elastic_ip_new').prop("checked",true);
    dialog.find('#' + resource_type + '_elastic_ip').parent().hide();
  }
  dialog.find('#' + resource_type + '_delete').show();
  dialog.modal('show');
};

function addMessagesToDiv(jDiv, content){
   jDiv.append(content);
   $(".messages").delay(10000).fadeOut("slow", function () { $(this).remove(); });
}

function showFlashMessages(jDiv, type, content){
   var id = "ajax-template";
   if(type == "notice")
     id = "basic-template";
   if(type == "error")
     id = "themeroller";
   jDiv.notify("create",id,{text: content},{expires: 5000,speed: 1000,custom: true});
}

function getErrorMessage(message){
  var errorMessage = '<div class="alert alert-error messages"><button type="button" class="close" data-dismiss="alert">x</button>' + message + '</div>' ;
  return errorMessage ;
};

function showLoading(message){
  if(message == "undefined")
    message = "Please Wait..." ;
  $('#loading-text').html(message);
  $('#loading').modal('show').css({
    width: 'auto',
    'margin-top': function () {
      return -($(this).height() / 2);
    },
    'margin-left': function () {
      return -($(this).width() / 2);
    }
  });
};

function hideLoading(){
  $('#loading').modal('hide');
};

function shortenLongStrings(string, maxLength){
  var shortString = string.substring(0, (maxLength-4));
  if (string.length > maxLength)
    shortString += '...';
  return shortString;
}

/*
// For debugging mouse movement inside graph area
$(document).ready(function(){
  $('.graph-area').mousemove(function(e){
  var x = e.pageX - this.offsetLeft;
  var y = e.pageY - this.offsetTop;
  $('.graph-area').html("X: " + x + " Y: " + y);
  });
});
*/

//Enable Bootstrap Tooltips for dialog box
$(document).on('mouseenter','[rel=tooltip]', function(){
  $(this).tooltip('show');
});

$(document).on('mouseleave','[rel=tooltip]', function(){
  $(this).tooltip('hide');
});

$(document).ready(function(){
  //Hide notifications
  $("#container").notify({expires: false,speed: 1000});
  $( "#ElastiCache_node_count" ).spinner();
});
